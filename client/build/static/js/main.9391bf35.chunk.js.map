{"version":3,"sources":["reducers/list.js","reducers/search.js","reducers/index.js","app/store.js","Routes/Public.js","Routes/index.js","App.js","serviceWorker.js","index.js","actions/types.js"],"names":["initialState","list","count","loadingList","loadingCount","battle_id","selectedBattle","loadingBattle","sortingParams","limit","page","king","location","type","combineReducers","battles","state","action","payload","RESET_BATTLE","SHOW_BATTLE_LIST","filter","d","SHOW_BATTLE_COUNT","LOADING_BATTLES_COUNT","LOADING_BATTLES_LIST","search","RESET_SEARCHED_BATTLE","UPDATE_SEARCH_PARAMS","UPDATE_SEARCH_BATTLE_ID","SHOW_SEARCH_LIST","SHOW_SEARCHED_BATTLE","LOADING_BATTLE_SEARCH","LOADING_SEARCHED_BATTLE","middleware","thunk","appliedMiddleware","applyMiddleware","store","createStore","rootReducer","PublicRoute","Component","component","rest","render","props","Battlefield","React","lazy","Routes","Suspense","fallback","Public","exact","path","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9391bf35.chunk.js","sourcesContent":["import {\n  LOADING_BATTLES_LIST,\n  LOADING_BATTLES_COUNT,\n  SHOW_BATTLE_LIST,\n  SHOW_BATTLE_COUNT,\n  RESET_BATTLE,\n} from \"actions/types\";\n\nconst initialState = {\n  list: [],\n  count: 0,\n  loadingList: true,\n  loadingCount: true,\n  // error: {},\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_BATTLE:\n      return {\n        ...initialState,\n        loadingList: state.loadingList,\n        loadingCount: state.loadingCount,\n      };\n    case SHOW_BATTLE_LIST:\n      return {\n        ...state,\n        list: payload.filter(d => !!d),\n        loadingList: false,\n      };\n    case SHOW_BATTLE_COUNT:\n      return {\n        ...state,\n        count: payload,\n        loadingCount: false,\n      };\n    case LOADING_BATTLES_COUNT:\n      return {\n        ...state,\n        loadingCount: true,\n      }\n    case LOADING_BATTLES_LIST: \n      return {\n        ...state,\n        loadingList: true\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  LOADING_BATTLE_SEARCH,\n  LOADING_SEARCHED_BATTLE,\n  SHOW_SEARCH_LIST,\n  SHOW_SEARCHED_BATTLE,\n  RESET_SEARCHED_BATTLE,\n  UPDATE_SEARCH_PARAMS,\n  UPDATE_SEARCH_BATTLE_ID,\n} from \"actions/types\";\n\nconst initialState = {\n  list: [],\n  battle_id: null,\n  selectedBattle: null,\n  loadingBattle: true,\n  loadingList: true,\n  // error: {},\n  sortingParams: {\n    limit: 20,\n    page: 1,\n    king: \"\",\n    location: \"\",\n    type: \"\",\n  }\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n  switch (type) {\n    case RESET_SEARCHED_BATTLE:\n      return {\n        ...initialState,\n        loadingList: state.loadingList,\n        loadingBattle: state.loadingBattle,\n      };\n    case UPDATE_SEARCH_PARAMS:\n      return  {\n        ...state,\n        sortingParams: { ...payload }\n      };\n    case UPDATE_SEARCH_BATTLE_ID:\n      return {\n        ...state,\n        battle_id: payload,\n      };\n    case SHOW_SEARCH_LIST:\n      return {\n        ...state,\n        list: payload,\n        loadingList: false,\n      };\n    case SHOW_SEARCHED_BATTLE:\n      return {\n        ...state,\n        selectedBattle: payload,\n        loadingBattle: false,\n      };\n    case LOADING_BATTLE_SEARCH: \n      return {\n        ...state,\n        loadingList: true\n      };\n    case LOADING_SEARCHED_BATTLE: \n      return {\n        ...state,\n        loadingBattle: true\n      };\n    default:\n      return state;\n  }\n}\n","import battles from \"./list\";\nimport { combineReducers } from \"redux\";\nimport search from \"./search\";\n\nexport default combineReducers({\n  battles,\n  search,\n});","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\nvar appliedMiddleware = applyMiddleware(...middleware);\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  // dev code\n  const composeEnhancers = composeWithDevTools({ \n    trace: true, \n    traceLimit: 25 \n  });\n  appliedMiddleware = composeEnhancers(appliedMiddleware)\n} else {\n  // production code\n}\n\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  appliedMiddleware,\n);\n\nexport default store;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nconst PublicRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      render={props => <Component {...props} /> }\n    />\n  );\n};\n\nexport default PublicRoute;\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport Public from \"./Public\";\nconst Battlefield = React.lazy(() => import('views/Layout'));\n\nconst Routes = () => {\n  return (\n    <React.Suspense fallback={\"loading...\"}>\n      <Switch>\n        <Public\n          exact\n          path=\"/*\"\n          component={Battlefield}\n        />\n      </Switch>\n    </React.Suspense>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\r\nimport Routes from \"./Routes\";\r\nimport './App.css';\r\nimport './custom.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Switch>\r\n          <Route component={Routes} />\r\n        </Switch>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const LOADING_BATTLES_LIST = \"LOADING_BATTLES_LIST\";\nexport const LOADING_BATTLES_COUNT = \"LOADING_BATTLES_COUNT\";\nexport const LOADING_BATTLE_SEARCH = \"LOADING_BATTLE_SEARCH\";\nexport const LOADING_SEARCHED_BATTLE = \"LOADING_SEARCHED_BATTLE\";\n\nexport const SHOW_BATTLE_LIST = \"SHOW_BATTLE_LIST\";\nexport const SHOW_SEARCHED_BATTLE = \"SHOW_SEARCHED_BATTLE\";\nexport const SHOW_BATTLE_COUNT = \"SHOW_BATTLE_COUNT\";\nexport const SHOW_SEARCH_LIST = \"SHOW_SEARCH_LIST\";\n\nexport const UPDATE_SEARCH_PARAMS = \"UPDATE_SEARCH_PARAMS\";\nexport const UPDATE_SEARCH_BATTLE_ID = \"UPDATE_SEARCH_BATTLE_ID\";\n\nexport const RESET_BATTLE = \"RESET_BATTLE\";\nexport const RESET_SEARCHED_BATTLE = \"RESET_SEARCHED_BATTLE\";"],"sourceRoot":""}